{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["trendingUrl","concat","App","state","gifs","loading","searchGifs","event","preventDefault","q","target","value","axios","get","then","response","_this","setState","data","_this2","this","_this$state","gifsList","map","gif","react_default","a","createElement","key","id","src","images","downsized_still","url","alt","style","margin","width","Fragment","textAlign","onSubmit","type","name","display","flexWrap","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAKMA,EAAW,kDAAAC,OADD,oCAsEDC,6MAhEbC,MAAQ,CACNC,KAAM,GACNC,SAAS,KAUXC,WAAa,SAACC,GACZA,EAAMC,iBACN,IAAMC,EAAIF,EAAMG,OAAOD,EAAEE,MACzBJ,EAAMG,OAAOD,EAAEE,MAAQ,GAEvBC,IACGC,IADH,0CAAAZ,OAE8CQ,EAF9C,8CAIGK,KAAK,SAACC,GACL,OAAOC,EAAKC,SAAS,CAAEZ,SAAS,EAAOD,KAAMW,EAASG,KAAKA,6FAjB7C,IAAAC,EAAAC,KAClBR,IACGC,IAAIb,GACJc,KAAK,SAACC,GAAD,OACJI,EAAKF,SAAS,CAAEZ,SAAS,EAAOD,KAAMW,EAASG,KAAKA,0CAiBjD,IAAAG,EACmBD,KAAKjB,MAAvBE,EADDgB,EACChB,QAEFiB,EAHCD,EACUjB,KAEKmB,IAAI,SAACC,GACzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAIK,IACZJ,EAAAC,EAAAC,cAAA,OACEG,IAAKN,EAAIO,OAAOC,gBAAgBC,IAChCC,IAAI,GACJC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,cAMxC,OACEZ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAY,SAAA,KACEb,EAAAC,EAAAC,cAAA,MAAIQ,MAAO,CAAEI,UAAW,WAAxB,QACAd,EAAAC,EAAAC,cAAA,QAAMa,SAAUpB,KAAKd,WAAY6B,MAAO,CAAEI,UAAW,WACnDd,EAAAC,EAAAC,cAAA,SAAOc,KAAK,OAAOC,KAAK,MACxBjB,EAAAC,EAAAC,cAAA,yBAEDtB,EACCoB,EAAAC,EAAAC,cAAA,OACEQ,MAAO,CACLI,UAAW,WAGbd,EAAAC,EAAAC,cAAA,8BAGFF,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAAEQ,QAAS,OAAQC,SAAU,SAAWtB,WA1D5CuB,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.c08390a4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst API_KEY = \"O41WyMvXUcvMbwzA3M8QxKVBAO60B31N\";\nconst trendingUrl = `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}`;\n// const searchUrl = (q) =>\n//   `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${q}`;\n\nclass App extends React.Component {\n  state = {\n    gifs: [],\n    loading: true,\n  };\n\n  componentDidMount() {\n    axios\n      .get(trendingUrl)\n      .then((response) =>\n        this.setState({ loading: false, gifs: response.data.data })\n      );\n  }\n  searchGifs = (event) => {\n    event.preventDefault();\n    const q = event.target.q.value;\n    event.target.q.value = \"\";\n\n    axios\n      .get(\n        `https://api.giphy.com/v1/gifs/search?q=${q}&api_key=O41WyMvXUcvMbwzA3M8QxKVBAO60B31N`\n      )\n      .then((response) => {\n        return this.setState({ loading: false, gifs: response.data.data });\n      });\n  };\n\n  render() {\n    const { loading, gifs } = this.state;\n\n    const gifsList = gifs.map((gif) => {\n      return (\n        <div key={gif.id}>\n          <img\n            src={gif.images.downsized_still.url}\n            alt=\"\"\n            style={{ margin: \"10px\", width: \"200px\" }}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <>\n        <h1 style={{ textAlign: \"center\" }}>Gifs</h1>\n        <form onSubmit={this.searchGifs} style={{ textAlign: \"center\" }}>\n          <input type=\"text\" name=\"q\" />\n          <button>Search</button>\n        </form>\n        {loading ? (\n          <div\n            style={{\n              textAlign: \"center\",\n            }}\n          >\n            <h1>Loading Gifs...</h1>\n          </div>\n        ) : (\n          <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>{gifsList}</div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}